@page "/quotesby/{searchby}/{slug}"
@using BlazorApp.Shared
@inject HttpClient Http

@if (authorQuotes == null)
{
    <MudContainer Class="mt-16">
    
    <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Class="my-4" />
    </MudContainer>
}
else
{

    <MudContainer Class="mt-16">
        <MudGrid Class="mt-8">
            @foreach (var item in authorQuotes)
            {
                <MudItem xs="12" sm="6" md="4">


                    <MudCard>
                        <MudCardContent>

                            <MudText Typo="Typo.h6" Class="my-5" Align="Align.Center">"@item.Content"</MudText>


                            <MudStack Row="true">
                                <MudAvatar Image="@item.Author.PhotoUrl" Size="Size.Large" />
                                <MudStack Justify="Justify.Center" Spacing="0">
                                    <MudText Typo="Typo.subtitle2">@item.Author.Name</MudText>
                                    <MudText Typo="Typo.body2">@item.Book.Title</MudText>
                                </MudStack>
                            </MudStack>



                            <MudDivider DividerType="DividerType.Middle" Class="my-3" />

                            @foreach (var tag in item.Tags)
                            {
                                <MudChip Color="Color.Default">@tag</MudChip>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">More by author</MudButton>
                        </MudCardActions>
                    </MudCard>

                </MudItem>
            }

        </MudGrid>
    </MudContainer>

}

@code {

    [Parameter] public string Slug { get; set; }
    [Parameter] public string SearchBy { get; set; }
    //protected Search.Model Model { get; set; } = new Search.Model();

    private Quote[] quotes = new Quote[]{};
    private IEnumerable<Quote> authorQuotes;


    protected override async Task OnInitializedAsync()
    {
        //var http = HttpClientFactory.CreateClient("ASimpleBlogStarter.AnonymousAPI");
        // Model = await http.GetFromJsonAsync<Search.Model>($"api/post/search?slug={Slug}");
        try
        {
            quotes = await Http.GetFromJsonAsync<Quote[]>("/api/GetQuotes") ?? new Quote[] { };

            if (SearchBy.Equals("author"))
            {  
                authorQuotes = quotes.Where(q => q.Author.Name.Contains(Slug));

            } else if (SearchBy.Equals("book"))
            {   
                 authorQuotes = quotes.Where(q => q.Book.Title.Contains(Slug));
            } else if (SearchBy.Equals("tag"))
            {   
                 authorQuotes = quotes.Where(q => q.Tags.Contains(Slug));
            }

           
            //authorsQ = quotes.Select(q => q.Author).DistinctBy(a => a.Name);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

  

}