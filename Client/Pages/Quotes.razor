@page "/quotes"
@using BlazorApp.Shared
@inject HttpClient Http

@if (quotes == null)
{
    
    <MudProgressLinear Color="MudBlazor.Color.Primary" Indeterminate="true" Size="Size.Large" />
}
else
{

    <MudContainer Class="mt-16">
       
        <MudTextField @bind-Value="searchTerm" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" @bind-Value:event="TextChanged" Immediate="true"></MudTextField>


        <MudGrid Class="mt-8">
            @foreach (var item in searchResults)
            {
                <MudItem xs="12" sm="6" md="4">


                    <MudCard>
                        <MudCardContent>

                            <MudText Typo="Typo.h6" Class="my-5" Align="Align.Center">"@item.Content"</MudText>


                            <MudStack Row="true">
                                <MudAvatar Image="@item.AuthorPhotoUrl" Size="Size.Large" />
                                <MudStack Justify="Justify.Center" Spacing="0">
                                    <MudText Typo="Typo.subtitle2">@item.AuthorName</MudText>
                                    <MudText Typo="Typo.body2">@item.BookName</MudText>
                                </MudStack>
                            </MudStack>



                            <MudDivider DividerType="DividerType.Middle" Class="my-3" />

                            @foreach (var tag in item.Tags)
                            {
                                <MudChip Color="Color.Default">@tag</MudChip>
                            }
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Variant="Variant.Text" Color="Color.Primary">More by author</MudButton>
                        </MudCardActions>
                    </MudCard>

                </MudItem>
            }

        </MudGrid>
    </MudContainer>

}

@code {
    private Quote[] quotes = new Quote[] { };
    private string searchTerm { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            quotes = await Http.GetFromJsonAsync<Quote[]>("/api/GetQuotes") ?? new Quote[] { };
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }
    private IEnumerable<Quote> searchResults =>
        quotes.Where(p => string.IsNullOrEmpty(searchTerm)
        || p.Content.ToLower().Contains(searchTerm.ToLower())
    );
}
